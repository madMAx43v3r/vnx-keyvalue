
// AUTO GENERATED by vnxcppcodegen

#include <vnx/keyvalue/package.hxx>
#include <vnx/keyvalue/Server__sync_finished_return.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Object.h>
#include <vnx/Struct.h>
#include <vnx/Value.h>



namespace vnx {
namespace keyvalue {


const vnx::Hash64 Server__sync_finished_return::VNX_TYPE_HASH(0x4039b73e1e85b062ull);
const vnx::Hash64 Server__sync_finished_return::VNX_CODE_HASH(0xf38528ae751c65e0ull);

vnx::Hash64 Server__sync_finished_return::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* Server__sync_finished_return::get_type_name() const {
	return "vnx.keyvalue.Server._sync_finished.return";
}
const vnx::TypeCode* Server__sync_finished_return::get_type_code() const {
	return vnx::keyvalue::vnx_native_type_code_Server__sync_finished_return;
}

std::shared_ptr<Server__sync_finished_return> Server__sync_finished_return::create() {
	return std::make_shared<Server__sync_finished_return>();
}

std::shared_ptr<vnx::Value> Server__sync_finished_return::clone() const {
	return std::make_shared<Server__sync_finished_return>(*this);
}

void Server__sync_finished_return::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void Server__sync_finished_return::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void Server__sync_finished_return::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server__sync_finished_return;
	_visitor.type_begin(*_type_code);
	_visitor.type_end(*_type_code);
}

void Server__sync_finished_return::write(std::ostream& _out) const {
	_out << "{\"__type\": \"vnx.keyvalue.Server._sync_finished.return\"";
	_out << "}";
}

void Server__sync_finished_return::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
	}
}

vnx::Object Server__sync_finished_return::to_object() const {
	vnx::Object _object;
	return _object;
}

void Server__sync_finished_return::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const Server__sync_finished_return& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, Server__sync_finished_return& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* Server__sync_finished_return::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> Server__sync_finished_return::static_create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "vnx.keyvalue.Server._sync_finished.return";
	type_code->type_hash = vnx::Hash64(0x4039b73e1e85b062ull);
	type_code->code_hash = vnx::Hash64(0xf38528ae751c65e0ull);
	type_code->is_native = true;
	type_code->is_class = true;
	type_code->is_return = true;
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<Server__sync_finished_return>(); };
	type_code->build();
	return type_code;
}


} // namespace vnx
} // namespace keyvalue


namespace vnx {

void read(TypeInput& in, ::vnx::keyvalue::Server__sync_finished_return& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::keyvalue::Server__sync_finished_return& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::keyvalue::vnx_native_type_code_Server__sync_finished_return;
		out.write_type_code(type_code);
		vnx::write_class_header<::vnx::keyvalue::Server__sync_finished_return>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
}

void read(std::istream& in, ::vnx::keyvalue::Server__sync_finished_return& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::keyvalue::Server__sync_finished_return& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::keyvalue::Server__sync_finished_return& value) {
	value.accept(visitor);
}

} // vnx
