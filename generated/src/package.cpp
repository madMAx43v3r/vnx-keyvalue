
// AUTO GENERATED by vnxcppcodegen

#include <vnx/keyvalue/CloseEntry.hxx>
#include <vnx/keyvalue/Collection.hxx>
#include <vnx/keyvalue/IndexEntry.hxx>
#include <vnx/keyvalue/KeyValuePair.hxx>
#include <vnx/keyvalue/ServerBase.hxx>
#include <vnx/keyvalue/Server_delete_value.hxx>
#include <vnx/keyvalue/Server_delete_value_return.hxx>
#include <vnx/keyvalue/Server_get_value.hxx>
#include <vnx/keyvalue/Server_get_value_return.hxx>
#include <vnx/keyvalue/Server_get_value_locked.hxx>
#include <vnx/keyvalue/Server_get_value_locked_return.hxx>
#include <vnx/keyvalue/Server_get_values.hxx>
#include <vnx/keyvalue/Server_get_values_return.hxx>
#include <vnx/keyvalue/Server_store_value.hxx>
#include <vnx/keyvalue/Server_store_value_return.hxx>
#include <vnx/keyvalue/Server_store_values.hxx>
#include <vnx/keyvalue/Server_store_values_return.hxx>
#include <vnx/keyvalue/Server_sync_all.hxx>
#include <vnx/keyvalue/Server_sync_all_return.hxx>
#include <vnx/keyvalue/Server_sync_all_keys.hxx>
#include <vnx/keyvalue/Server_sync_all_keys_return.hxx>
#include <vnx/keyvalue/Server_sync_from.hxx>
#include <vnx/keyvalue/Server_sync_from_return.hxx>
#include <vnx/keyvalue/Server_sync_range.hxx>
#include <vnx/keyvalue/Server_sync_range_return.hxx>
#include <vnx/keyvalue/Server_unlock.hxx>
#include <vnx/keyvalue/Server_unlock_return.hxx>
#include <vnx/keyvalue/SyncInfo.hxx>
#include <vnx/keyvalue/SyncModuleBase.hxx>
#include <vnx/keyvalue/TypeEntry.hxx>

#include <vnx/vnx.h>



namespace vnx {
namespace keyvalue {


static void register_all_types() {
	vnx::register_type_code(::vnx::keyvalue::CloseEntry::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Collection::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::IndexEntry::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::KeyValuePair::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::ServerBase::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_delete_value::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_delete_value_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_get_value::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_get_value_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_get_value_locked::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_get_value_locked_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_get_values::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_get_values_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_store_value::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_store_value_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_store_values::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_store_values_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_sync_all::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_sync_all_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_sync_all_keys::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_sync_all_keys_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_sync_from::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_sync_from_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_sync_range::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_sync_range_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_unlock::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::Server_unlock_return::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::SyncInfo::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::SyncModuleBase::static_create_type_code());
	vnx::register_type_code(::vnx::keyvalue::TypeEntry::static_create_type_code());
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;

const vnx::TypeCode* const vnx_native_type_code_CloseEntry = vnx::get_type_code(vnx::Hash64(0xc06cd9d036102eefull));
const vnx::TypeCode* const vnx_native_type_code_Collection = vnx::get_type_code(vnx::Hash64(0xf1b6072fecc4ebf8ull));
const vnx::TypeCode* const vnx_native_type_code_IndexEntry = vnx::get_type_code(vnx::Hash64(0xbcae33addff34e23ull));
const vnx::TypeCode* const vnx_native_type_code_KeyValuePair = vnx::get_type_code(vnx::Hash64(0xf87436237449d8afull));
const vnx::TypeCode* const vnx_native_type_code_ServerBase = vnx::get_type_code(vnx::Hash64(0xbb28aa6f1d808048ull));
const vnx::TypeCode* const vnx_native_type_code_Server_delete_value = vnx::get_type_code(vnx::Hash64(0xf5f6c0eca92f8e82ull));
const vnx::TypeCode* const vnx_native_type_code_Server_delete_value_return = vnx::get_type_code(vnx::Hash64(0x6b26b84842654d71ull));
const vnx::TypeCode* const vnx_native_type_code_Server_get_value = vnx::get_type_code(vnx::Hash64(0xe2ff2d7a976abdb8ull));
const vnx::TypeCode* const vnx_native_type_code_Server_get_value_return = vnx::get_type_code(vnx::Hash64(0x2eda7f8d6761272dull));
const vnx::TypeCode* const vnx_native_type_code_Server_get_value_locked = vnx::get_type_code(vnx::Hash64(0x99472796c5804f63ull));
const vnx::TypeCode* const vnx_native_type_code_Server_get_value_locked_return = vnx::get_type_code(vnx::Hash64(0xb78e8762c3bbfe99ull));
const vnx::TypeCode* const vnx_native_type_code_Server_get_values = vnx::get_type_code(vnx::Hash64(0x29edfe1764d9e55ull));
const vnx::TypeCode* const vnx_native_type_code_Server_get_values_return = vnx::get_type_code(vnx::Hash64(0x92bdf340933764bcull));
const vnx::TypeCode* const vnx_native_type_code_Server_store_value = vnx::get_type_code(vnx::Hash64(0xf6bea692aee1018cull));
const vnx::TypeCode* const vnx_native_type_code_Server_store_value_return = vnx::get_type_code(vnx::Hash64(0x8bc8f7e913889f88ull));
const vnx::TypeCode* const vnx_native_type_code_Server_store_values = vnx::get_type_code(vnx::Hash64(0xfff6bea692aee101ull));
const vnx::TypeCode* const vnx_native_type_code_Server_store_values_return = vnx::get_type_code(vnx::Hash64(0x68bd7b177e8a4f88ull));
const vnx::TypeCode* const vnx_native_type_code_Server_sync_all = vnx::get_type_code(vnx::Hash64(0x6173affeadaf11ddull));
const vnx::TypeCode* const vnx_native_type_code_Server_sync_all_return = vnx::get_type_code(vnx::Hash64(0x964de09bdefcfc87ull));
const vnx::TypeCode* const vnx_native_type_code_Server_sync_all_keys = vnx::get_type_code(vnx::Hash64(0x5f4cae900d6d7f69ull));
const vnx::TypeCode* const vnx_native_type_code_Server_sync_all_keys_return = vnx::get_type_code(vnx::Hash64(0xd419b32d0bc488e3ull));
const vnx::TypeCode* const vnx_native_type_code_Server_sync_from = vnx::get_type_code(vnx::Hash64(0xc10ef313be34be0full));
const vnx::TypeCode* const vnx_native_type_code_Server_sync_from_return = vnx::get_type_code(vnx::Hash64(0x68661d3bb01d2b6bull));
const vnx::TypeCode* const vnx_native_type_code_Server_sync_range = vnx::get_type_code(vnx::Hash64(0x21592a9e03b544fdull));
const vnx::TypeCode* const vnx_native_type_code_Server_sync_range_return = vnx::get_type_code(vnx::Hash64(0xd451dace3153346bull));
const vnx::TypeCode* const vnx_native_type_code_Server_unlock = vnx::get_type_code(vnx::Hash64(0xfd9d27aa50baa773ull));
const vnx::TypeCode* const vnx_native_type_code_Server_unlock_return = vnx::get_type_code(vnx::Hash64(0x81abb06c1b73263dull));
const vnx::TypeCode* const vnx_native_type_code_SyncInfo = vnx::get_type_code(vnx::Hash64(0x4f9820ae95813502ull));
const vnx::TypeCode* const vnx_native_type_code_SyncModuleBase = vnx::get_type_code(vnx::Hash64(0x508da303057fe58cull));
const vnx::TypeCode* const vnx_native_type_code_TypeEntry = vnx::get_type_code(vnx::Hash64(0x5d3011caa7dadfd3ull));

} // namespace vnx
} // namespace keyvalue
