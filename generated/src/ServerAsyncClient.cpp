
// AUTO GENERATED by vnxcppcodegen

#include <vnx/keyvalue/package.hxx>
#include <vnx/keyvalue/ServerAsyncClient.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>


namespace vnx {
namespace keyvalue {

ServerAsyncClient::ServerAsyncClient(const std::string& service_name)
	:	AsyncClient::AsyncClient(vnx::Hash64(service_name))
{
}

ServerAsyncClient::ServerAsyncClient(vnx::Hash64 service_addr)
	:	AsyncClient::AsyncClient(service_addr)
{
}

uint64_t ServerAsyncClient::block_sync_finished(const ::int64_t& job_id, const std::function<void()>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server_block_sync_finished;
	{
		char* const _buf = _out.write(8);
		vnx::write_value(_buf + 0, job_id);
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_block_sync_finished[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t ServerAsyncClient::delete_value(const ::vnx::Variant& key, const std::function<void()>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server_delete_value;
	{
		vnx::write(_out, key, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_delete_value[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t ServerAsyncClient::get_value(const ::vnx::Variant& key, const std::function<void(::std::shared_ptr<const ::vnx::Value>)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server_get_value;
	{
		vnx::write(_out, key, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_get_value[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t ServerAsyncClient::get_values(const ::std::vector<::vnx::Variant>& keys, const std::function<void(::std::vector<::std::shared_ptr<const ::vnx::Value>>)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server_get_values;
	{
		vnx::write(_out, keys, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_get_values[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t ServerAsyncClient::store_value(const ::vnx::Variant& key, const ::std::shared_ptr<const ::vnx::Value>& value, const std::function<void()>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server_store_value;
	{
		vnx::write(_out, key, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, value, _type_code, _type_code->fields[1].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_store_value[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t ServerAsyncClient::sync_all(const ::vnx::TopicPtr& topic, const std::function<void()>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server_sync_all;
	{
		vnx::write(_out, topic, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_sync_all[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t ServerAsyncClient::sync_all_keys(const ::vnx::TopicPtr& topic, const std::function<void()>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server_sync_all_keys;
	{
		vnx::write(_out, topic, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_sync_all_keys[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t ServerAsyncClient::sync_from(const ::vnx::TopicPtr& topic, const ::uint64_t& version, const std::function<void()>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server_sync_from;
	{
		char* const _buf = _out.write(8);
		vnx::write_value(_buf + 0, version);
		vnx::write(_out, topic, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_sync_from[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t ServerAsyncClient::sync_range(const ::vnx::TopicPtr& topic, const ::uint64_t& begin, const ::uint64_t& end, const std::function<void()>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Server_sync_range;
	{
		char* const _buf = _out.write(16);
		vnx::write_value(_buf + 0, begin);
		vnx::write_value(_buf + 8, end);
		vnx::write(_out, topic, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_sync_range[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

std::vector<uint64_t>ServerAsyncClient::vnx_get_pending_ids() const {
	std::vector<uint64_t> _list;
	for(const auto& entry : vnx_queue_block_sync_finished) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_delete_value) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_get_value) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_get_values) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_store_value) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_sync_all) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_sync_all_keys) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_sync_from) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_sync_range) {
		_list.push_back(entry.first);
	}
	return _list;
}

void ServerAsyncClient::vnx_purge_request(uint64_t _request_id) {
	vnx_num_pending -= vnx_queue_block_sync_finished.erase(_request_id);
	vnx_num_pending -= vnx_queue_delete_value.erase(_request_id);
	vnx_num_pending -= vnx_queue_get_value.erase(_request_id);
	vnx_num_pending -= vnx_queue_get_values.erase(_request_id);
	vnx_num_pending -= vnx_queue_store_value.erase(_request_id);
	vnx_num_pending -= vnx_queue_sync_all.erase(_request_id);
	vnx_num_pending -= vnx_queue_sync_all_keys.erase(_request_id);
	vnx_num_pending -= vnx_queue_sync_from.erase(_request_id);
	vnx_num_pending -= vnx_queue_sync_range.erase(_request_id);
}

void ServerAsyncClient::vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Binary> _data) {
	vnx::BinaryInputStream _stream_in(_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _data->type_code;
	
	if(_return_type->type_hash == vnx::Hash64(0xe5d95a7b370db191ull)) {
		auto _iter = vnx_queue_block_sync_finished.find(_request_id);
		if(_iter != vnx_queue_block_sync_finished.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_block_sync_finished.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x6b26b84842654d71ull)) {
		auto _iter = vnx_queue_delete_value.find(_request_id);
		if(_iter != vnx_queue_delete_value.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_delete_value.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x2eda7f8d6761272dull)) {
		::std::shared_ptr<const ::vnx::Value> _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_get_value.find(_request_id);
		if(_iter != vnx_queue_get_value.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_get_value.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x92bdf340933764bcull)) {
		::std::vector<::std::shared_ptr<const ::vnx::Value>> _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_get_values.find(_request_id);
		if(_iter != vnx_queue_get_values.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_get_values.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x8bc8f7e913889f88ull)) {
		auto _iter = vnx_queue_store_value.find(_request_id);
		if(_iter != vnx_queue_store_value.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_store_value.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x964de09bdefcfc87ull)) {
		auto _iter = vnx_queue_sync_all.find(_request_id);
		if(_iter != vnx_queue_sync_all.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_sync_all.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0xd419b32d0bc488e3ull)) {
		auto _iter = vnx_queue_sync_all_keys.find(_request_id);
		if(_iter != vnx_queue_sync_all_keys.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_sync_all_keys.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x68661d3bb01d2b6bull)) {
		auto _iter = vnx_queue_sync_from.find(_request_id);
		if(_iter != vnx_queue_sync_from.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_sync_from.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0xd451dace3153346bull)) {
		auto _iter = vnx_queue_sync_range.find(_request_id);
		if(_iter != vnx_queue_sync_range.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_sync_range.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		}
	}
	else {
		throw std::runtime_error("unknown return value");
	}
}


} // namespace vnx
} // namespace keyvalue
