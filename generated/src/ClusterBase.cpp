
// AUTO GENERATED by vnxcppcodegen

#include <vnx/keyvalue/package.hxx>
#include <vnx/keyvalue/ClusterBase.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Object.h>
#include <vnx/Struct.h>
#include <vnx/Config.h>
#include <vnx/Binary.h>
#include <vnx/NoSuchMethod.hxx>


namespace vnx {
namespace keyvalue {


const vnx::Hash64 ClusterBase::VNX_TYPE_HASH(0xd15d8542fc63cb26ull);
const vnx::Hash64 ClusterBase::VNX_CODE_HASH(0x9679d083a6f600b0ull);

ClusterBase::ClusterBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
}

vnx::Hash64 ClusterBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* ClusterBase::get_type_name() const {
	return "vnx.keyvalue.Cluster";
}
const vnx::TypeCode* ClusterBase::get_type_code() const {
	return vnx::keyvalue::vnx_native_type_code_Cluster;
}

void ClusterBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = vnx::keyvalue::vnx_native_type_code_Cluster;
	_visitor.type_begin(*_type_code);
	_visitor.type_end(*_type_code);
}

void ClusterBase::write(std::ostream& _out) const {
	_out << "{\"__type\": \"vnx.keyvalue.Cluster\"";
	_out << "}";
}

void ClusterBase::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
	}
}

vnx::Object ClusterBase::to_object() const {
	vnx::Object _object;
	return _object;
}

void ClusterBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const ClusterBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, ClusterBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* ClusterBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(vnx::Hash64(0xd15d8542fc63cb26ull));
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> ClusterBase::static_create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "vnx.keyvalue.Cluster";
	type_code->type_hash = vnx::Hash64(0xd15d8542fc63cb26ull);
	type_code->code_hash = vnx::Hash64(0x9679d083a6f600b0ull);
	type_code->is_native = true;
	type_code->methods.resize(0);
	type_code->build();
	return type_code;
}

void ClusterBase::vnx_handle_switch(std::shared_ptr<const ::vnx::Sample> _sample) {
	const uint64_t _type_hash = _sample->value->get_type_hash();
}

std::shared_ptr<vnx::Value> ClusterBase::vnx_call_switch(vnx::TypeInput& _in, const vnx::TypeCode* _call_type, const vnx::request_id_t& _request_id) {
	auto _ex = vnx::NoSuchMethod::create();
	_ex->dst_mac = vnx_request ? vnx_request->dst_mac : 0;
	_ex->method = _call_type->name;
	return _ex;
}


} // namespace vnx
} // namespace keyvalue


namespace vnx {

void read(TypeInput& in, ::vnx::keyvalue::ClusterBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::keyvalue::ClusterBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::keyvalue::vnx_native_type_code_Cluster;
		out.write_type_code(type_code);
		vnx::write_class_header<::vnx::keyvalue::ClusterBase>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
}

void read(std::istream& in, ::vnx::keyvalue::ClusterBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::keyvalue::ClusterBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::keyvalue::ClusterBase& value) {
	value.accept(visitor);
}

} // vnx
