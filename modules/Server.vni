package vnx.keyvalue;

import vnx.Variant;
import vnx.Value;
import vnx.TopicPtr;

module Server {
	
	TopicPtr update_topic;
	
	string collection = "storage";
	
	string storage_path;
	
	long max_block_size = 268435456;			// [bytes]
	
	int rewrite_chunk_size = 1048576;			// [bytes]
	
	int rewrite_chunk_count = 100;				// number of values
	
	float rewrite_threshold = 0.5;
	
	float idle_rewrite_threshold = 0.9;
	
	int rewrite_interval = 10;
	
	int idle_rewrite_interval = 100;
	
	int sync_chunk_count = 100;					// number of values
	
	int max_queue_ms = 1000;
	
	bool purge_deleted = true;					// if to purge deleted entries on rewrite
	
	bool ignore_errors = false;
	
	
	Value* get_value(Variant key) const;
	
	vector<Value*> get_values(vector<Variant> keys) const;
	
	long sync_from(TopicPtr topic, ulong version) const;				// sync all greater than version
	
	long sync_range(TopicPtr topic, ulong begin, ulong end) const;		// sync greater than begin and up to less than end
	
	long sync_all(TopicPtr topic) const;
	
	long sync_all_keys(TopicPtr topic) const;
	
	void store_value(Variant key, Value* value);
	
	void store_values(vector<pair<Variant, Value*>> values);
	
	void delete_value(Variant key);
	
	// below internal use only
	
	void _sync_finished(long job_id);
	
}
