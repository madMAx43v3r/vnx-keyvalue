package vnx.keyvalue;

import vnx.Value;
import vnx.Variant;
import vnx.TopicPtr;

interface Storage {
	
	Entry* get_value(Variant key) const async;
	
	/* Locks value until it is updated via store_value() or delete_value(), or until unlock() is called.
	 * While it is locked any read requests are blocked until lock is released.
	 */
	Entry* get_value_locked(Variant key, int timeout_ms) const async;
	
	vector<Entry*> get_values(vector<Variant> keys) const async;
	
	Variant get_key(ulong version) const async;

	vector<pair<ulong, Variant>> get_keys(vector<ulong> versions) const async;
	
	void unlock(Variant key);
	
	long sync_from(TopicPtr topic, ulong version) const;				// sync all greater than version
	
	long sync_range(TopicPtr topic, ulong begin, ulong end) const;		// sync greater than begin and up to less than end
	
	long sync_all(TopicPtr topic) const;
	
	long sync_all_keys(TopicPtr topic) const;
	
	void cancel_sync_job(long job_id);
	
	void store_value(Variant key, Value* value);
	
	void store_values(vector<pair<Variant, Value*>> values);
	
	void store_value_delay(Variant key, Value* value, int delay_ms);
	
	void store_values_delay(vector<pair<Variant, Value*>> values, int delay_ms);
	
	void delete_value(Variant key);
	
}
